plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'
}

group 'com.jadifans'
version '1.1.0'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.1'
}

sourceCompatibility = '19'
targetCompatibility = '19'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'com.jadifans.opert'
    mainClass = 'com.jadifans.opert.OpertApplication'
}

javafx {
    version = '19'
    modules = ['javafx.controls', 'javafx.fxml','javafx.media','javafx.base']
}

dependencies {
    implementation group: 'com.jfoenix', name: 'jfoenix', version: '9.0.9'
    implementation 'org.jetbrains:annotations:23.0.0'
    /*testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")*/
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-fontawesome5-pack:12.3.1'
        //using this dependency caused me to get the error/ no class def found /
    //implementation 'org.openjfx:javafx-swing:21-ea+5'
    implementation group: 'org.openjfx', name: 'javafx-web', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-media', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-base', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: '19'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: '19'
   // implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'

    implementation group: 'org.jsoup', name: 'jsoup', version: '1.16.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

   implementation('javax.xml.bind:jaxb-api:2.3.1')

    implementation('org.glassfish.jaxb:jaxb-runtime:2.3.1')
}


jlink {
   // imageZip = project.file("${buildDir}/distributions/app.zip")
    // Some default options
   // options = ['--strip-debug', '--compress', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'Opert-Monitoring'
    }
    // Does some magic to log4j JARs that don't want to merge


    jpackage {
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
         targetPlatformName = 'win'
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        resourceDir = file('src/main/java/com/jadifans/opert')
        if (targetPlatformName == 'mac') { // we are on mac
            targetPlatform("mac") {
                // Use downloaded Eclipse Temurin JDK
                jdkHome = '/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home'
                // Use another local JDK
                //jdkHome = '/Library/Java/JavaVirtualMachines/jdk-17.0.2.jdk/Contents/Home'
            }
            installerType = 'pkg' // we want to have macOS PKG
        }
        if (targetPlatformName == 'win') { // we are on Windows
            targetPlatform("win") {
                jdkHome = 'E:/java JDK/jdk19'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux') { // we are on linux
            targetPlatform("linux") {
            }
            installerType = 'deb'
        }
        // Add jpackage-specific options
        installerOptions = [
                '--name', 'Opert-Monitoring', // installer name
                //'--description', project.description,
                '--copyright', 'Copyrigth 2023 Siavash',
                '--vendor', 'Siavash.N']
        // We also could take the installer type from command line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)
        // Add platform-specific options for the target image and for jpackage
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/com.jadifans.opert/img/AppIcon.png']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'E:/javaprg/opert/src/main/resources/com/jadifans/opert/img/OpertIcon.ico']
            installerOptions += [
                   // '--win-per-user-install' , // Install only for current user
                   // '--win-console', // Shows what Java outputs to the console
                   '--vendor', 'Maxense Systems',
                    '--win-dir-chooser',
                    '--win-menu',
                    //'--win-menu-group',
                    '--win-shortcut',
                   '--file-associations','src/main/resources/extensionProperties/OpertExtension.properties'

            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/com/jadifans/opert/img/icon_256x256.png']
            installerOptions += [
                    '--linux-menu-group', 'Network',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'info@autumo.ch'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
}

